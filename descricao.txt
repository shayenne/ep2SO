====================================
Detalhamento do comportamento do ep2
====================================

- Shell
O shell responde a 5 comandos: carrega, espaco, substitui, executa e sai.

O que acontece no programa quando se digita:
> carrega [trace]
O programa lê o arquivo [trace] e cria uma lista (list) com todos os processos que devem ser simulados, cada processo é uma lista que contém: t0, nome, nº de bytes que ocupa e uma lista com as posições e tempos de acesso a cada uma delas.
Nesse momento também se define o tamanho da memória virtual e física que serão simuladas.

> espaco [n]
O programa define que tipo de algoritmo de busca de espaco livre será utilizado na simulação.
Os algoritmos podem ser:
1 - First Fit (primeira posição vazia que caiba)
2 - Next Fit (próxima posição vazia que caiba)
3 - Quick Fit (melhor tamanho que caiba)

> substitui [n]
O programa define que tipo de algoritmo de paginação será utilizado
1 - NRUP

2 - FIFO

3 - SCP

4 - LRUP


> executa [tempo]
Inicia a execução da simulação.
Cria os arquivos de memória /tmp/ep2.mem e /tmp/ep2.vir com o tamanho definido e preenche com '-1'.
A cada [tempo] segundos, imprime o estado das memórias (?) e o conteúdo da lista que mantém o status da memória.

Como funciona daqui para frente?
O tempo vai passar, e haverão processos chegando, processos pedindo para ver posicoes, como eu controlo ou verifico isso?

*****
Ideia: para cada processo cria um objeto processo.
Este objeto contém t0, nome, espaco, e lista de posicoes e tempos de acesso.

Quando iniciar a execução, avisa para todos os processos. (Objetos ou processos) (HOW?)
*Signal - entender como funciona isso!!! (Parece que é só para processos)
*Envia o time inicial do simulador? Isso parece que funciona...


Cada processo terá uma função que dorme até que chega o seu tempo de execução, baseado no tempo que ele recebeu como aviso.
Chegando o seu tempo, ele tenta alocar um espaço na memória, caso seja o t0, ou acessar uma posicao na memoria fisica, olhando para a sua lista.

+++++++++++++++++++++++++++
Importante: Deve ter uma lista ligada de verdade!!!! http://ls.pwd.io/2014/08/singly-and-doubly-linked-lists-in-python/
++++++++++++++++++++++++++++++

***********************
Alyssa passou por aqui
***********************
Suposicao geral do EP2
1) os processos do arquivo trace.txt estarao ordenados segundo t0 de forma crescente
2) os processos do arquivo trace.txt sao bem comportados no sentido de que nao irao escrever em lugares onde nao pertencem ao seu espaco [EX: p1 pede 16bytes de espaco e resolve escrever na posicao 42 -aqui estamos nos referindo que cada byte simula um endereco de memoria-]
3) os processos na memoria virtual serao armazenados por inteiro e de forma continua [talvez tenha mais cara de suposicao para implementacao]

**********************
DUVIDAS
- Vai ser possivel executar o programa sem escolher o algoritmo de paginacao e dos FITS? Seria bom fazer um default talvez?




************************
CONSIDERACOES GERAIS
- Escrever a implementacao tomada no quick fit!

- Criar lista de gerenciamento de memoria livre para a memoria virtual e memoria fisica onde o espaco de alocacao sera de 16bytes [especificado no ep] => essa sera a nossa pagina

- Os algoritmos dos FITS serao chamados na criacao de um processo na memoria virtual e para verificacao de espaco na memoria fisica, tomando cuidado para que nao ocorra race condition entre as threads quando for acessar a memoria [semaforo]. Lembrando que a unidade de inicio / tamanho é por unidade de alocacao.

- Os algoritmos FITs devem devolver a posicao inicial [base] que o processo ocupou para a MMU gerenciar o mapeamento. Caso nao encontre espaco necessario para o processo, avisar de alguma forma! [devolve -1, nao sei]

- Quando o algoritmo FIT falhar em encontrar o espaco na memoria FISICA, significa que o algoritmo de paginacao sera acionado.

- Criar uma funcao que arrume a lista de gerenciamento de memoria livre quando um processo terminar. Lembrando que aqui tambem ocorre race condition.

- Uma vez que a MMU encontra o endereco correto para a escrita nao ocorre a condicao de corrida pois cada processo tem o seu proprio espaco de enderecamento.
 


*******************************
Alyssa passou por aqui de novo
*******************************
- bit M nao e necessario pois as paginas chamadas nunca serao modificadas.

- lembrando que de tempos em tempos o bit R tera de ser resetado
